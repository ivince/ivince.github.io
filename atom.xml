<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IVINCE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ivince.github.io/"/>
  <updated>2016-11-01T02:54:58.784Z</updated>
  <id>https://ivince.github.io/</id>
  
  <author>
    <name>IVINCE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序</title>
    <link href="https://ivince.github.io/2016/10/28/quick-sort-algorithm/"/>
    <id>https://ivince.github.io/2016/10/28/quick-sort-algorithm/</id>
    <published>2016-10-28T12:23:37.000Z</published>
    <updated>2016-11-01T02:54:58.784Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="分区-partition"><a href="#分区-partition" class="headerlink" title="分区(partition)"></a>分区(partition)</h3><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>快速排序的基本思想是分治(divide and conquer)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;分区-partition&quot;&gt;&lt;a href=&quot;#分区-partition&quot; class=&quot;headerlink&quot; title=&quot;分区(partition)&quot;&gt;&lt;/a&gt;分区(partition)&lt;/h3&gt;&lt;h3 id=&quot;合并&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="快排" scheme="https://ivince.github.io/tags/%E5%BF%AB%E6%8E%92/"/>
    
      <category term="排序" scheme="https://ivince.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://ivince.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://ivince.github.io/2016/10/19/sorting-algorithm/"/>
    <id>https://ivince.github.io/2016/10/19/sorting-algorithm/</id>
    <published>2016-10-19T07:57:55.000Z</published>
    <updated>2016-10-19T16:06:15.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交换函数"><a href="#交换函数" class="headerlink" title="交换函数"></a>交换函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">list</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span></span><br><span class="line"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> temp = <span class="built_in">list</span>[low];</span><br><span class="line">    <span class="built_in">list</span>[low] = <span class="built_in">list</span>[high];</span><br><span class="line">    <span class="built_in">list</span>[high] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">冒泡排序（稳定）</span><br><span class="line">原理：第一次的内部for循环从记录数组的底部比较到顶部，比较相邻的值。</span><br><span class="line">如果低序号的值比高序号的值大，则二者交换顺序</span><br><span class="line">代价是n2</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubsort</span><span class="params">( <span class="keyword">int</span> *<span class="built_in">list</span>, <span class="keyword">int</span> n )</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = n-<span class="number">1</span>; j &gt; i; j-- )</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">if</span>( lt( <span class="built_in">list</span>[j], <span class="built_in">list</span>[j-<span class="number">1</span>] ) )</span><br><span class="line">                swap( <span class="built_in">list</span>, j, j-<span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">选择排序（不稳定）</span><br><span class="line">原理：选择排序的第i次是“选择”数组中第i小的记录，并将该记录放到数组的第i个位置。</span><br><span class="line">即首先从未排序的序列中找到最小的值，接着找到次小的，依次类推</span><br><span class="line">代价是n2</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selsort</span><span class="params">( <span class="keyword">int</span> *<span class="built_in">list</span>, <span class="keyword">int</span> n )</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> low_index = i;</span><br><span class="line">        <span class="keyword">for</span> ( j = n-<span class="number">1</span>; j &gt; i; j-- )</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">if</span>( lt( <span class="built_in">list</span>[j], <span class="built_in">list</span>[low_index] ) )</span><br><span class="line">                low_index = j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap( <span class="built_in">list</span>, i, low_index );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">插入排序函数（shell排序的辅助函数）</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inssort</span><span class="params">( <span class="keyword">int</span> *<span class="built_in">list</span>, <span class="keyword">int</span> n, <span class="keyword">int</span> incr )</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> ( i = incr; i &lt; n; i += incr )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = i; (j &gt;= incr) &amp;&amp; (lt (<span class="built_in">list</span>[j],<span class="built_in">list</span>[j-incr]) ); j -= incr )</span><br><span class="line">        &#123;    </span><br><span class="line">            swap( <span class="built_in">list</span>, j, j-incr );</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组分区，左小右大</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">array</span>, left, right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> storeIndex = left;        </span><br><span class="line">    <span class="keyword">int</span> pivot = <span class="built_in">array</span>[right]; <span class="comment">// 直接选最右边的元素为基准元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &lt; pivot) &#123;</span><br><span class="line">            swap(<span class="built_in">array</span>, storeIndex, i);</span><br><span class="line">            storeIndex++; <span class="comment">// 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(<span class="built_in">array</span>, right, storeIndex); <span class="comment">// 将基准元素放置到最后的正确位置上</span></span><br><span class="line">    <span class="keyword">return</span> storeIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="built_in">array</span>, left, right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> storeIndex = partition(<span class="built_in">array</span>, left, right);</span><br><span class="line">    sort(<span class="built_in">array</span>, left, storeIndex - <span class="number">1</span>);</span><br><span class="line">    sort(<span class="built_in">array</span>, storeIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    mSort(arr, left, mid); <span class="comment">//递归排序左边</span></span><br><span class="line">    mSort(arr, mid+<span class="number">1</span>, right); <span class="comment">//递归排序右边</span></span><br><span class="line">    merge(arr, left, mid, right); <span class="comment">//合并</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//[left, mid] [mid+1, right]</span></span><br><span class="line">    <span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>]; <span class="comment">//中间数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[k++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= right) &#123;</span><br><span class="line">        temp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;right-left+<span class="number">1</span>; p++) &#123;</span><br><span class="line">        arr[left + p] = temp[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>; <span class="comment">//直接平均可能會溢位，所以用此算法</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; key)</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, start, mid - <span class="number">1</span>, key);</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; key)</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, mid + <span class="number">1</span>, end, key);</span><br><span class="line">    <span class="keyword">return</span> mid; <span class="comment">//最後檢測相等是因為多數搜尋狀況不是大於要不就小於</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        mid = start + (end - start) / <span class="number">2</span>; <span class="comment">//直接平均可能會溢位，所以用此算法</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key)</span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key)</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">//最後檢測相等是因為多數搜尋狀況不是大於要不就小於</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p><a href="http://www.codeceo.com/article/10-sort-algorithm-interview.html" target="_blank" rel="external">面试中的10大排序算法总结</a><br><a href="http://blog.chinaunix.net/uid-21592001-id-3221516.html" target="_blank" rel="external">各种排序算法的C++实现</a><br><a href="http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/" target="_blank" rel="external">常见排序算法-快速排序</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;交换函数&quot;&gt;&lt;a href=&quot;#交换函数&quot; class=&quot;headerlink&quot; title=&quot;交换函数&quot;&gt;&lt;/a&gt;交换函数&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
    
    </summary>
    
    
      <category term="排序" scheme="https://ivince.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://ivince.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
